{"version":3,"sources":["Square.js","GameGrid.js","Game.js","App.js","index.js"],"names":["Square","props","React","createElement","className","player","onClick","click","GameGrid","moves","id","map","move","index","key","Game","setMoves","useState","Array","fill","turn","setTurn","winner","setWinner","checkWinner","winPatterns","pattern","a","b","c","every","useEffect","setTimeout","updatedMoves","emptySquares","filter","length","Math","floor","random","computerMove","currentWinner","Fragment","whichSquare","movesCopy","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"qKAUeA,MARf,SAAgBC,GACd,OACEC,IAAAC,cAAA,UAAQC,UAAWH,EAAMI,OAAQC,QAASL,EAAMM,OAC7CN,EAAMI,SCUEG,MAZf,SAAkBP,GAChB,MAAMQ,EAAQR,EAAMQ,MAEpB,OACEP,IAAAC,cAAA,OAAKO,GAAG,aACLD,EAAME,IAAI,CAACC,EAAMC,IAChBX,IAAAC,cAACH,EAAM,CAACc,IAAKD,EAAOR,OAAQO,EAAML,MAAOA,IAAMN,EAAMM,MAAMM,QCgGpDE,MAtGf,WACG,MAAON,EAAOO,GAAYC,mBAAS,IAAIC,MAAM,GAAGC,KAAK,MAC9CC,EAAMC,GAAWJ,mBAAS,MAC1BK,EAAQC,GAAaN,mBAAS,MAErC,SAASO,EAAYf,GAClB,MAAMgB,EAAc,CACjB,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAGrB,IAAK,IAAIC,KAAWD,EAAa,CAC9B,MAAOE,EAAGC,EAAGC,GAAKH,EAClB,GAAIjB,EAAMkB,IAAMlB,EAAMkB,KAAOlB,EAAMmB,IAAMnB,EAAMkB,KAAOlB,EAAMoB,GACzD,OAAOpB,EAAMkB,GAKnB,OAAIlB,EAAMqB,MAAMlB,GAAiB,KAATA,GACd,MAGH,KA0DV,OAjBAmB,oBAAU,KACM,MAATX,GAAiBE,GAClBU,WAAW,KACR,MACMC,EAnBf,SAAsBxB,GACnB,MAAMyB,EAAezB,EACjBE,IAAI,CAACC,EAAMC,IAAoB,KAATD,EAAcC,EAAQ,MAC5CsB,OAAOtB,GAAmB,OAAVA,GAGpB,GAAIqB,EAAaE,OAAS,EAAG,CAE1B3B,EAAMyB,EADcG,KAAKC,MAAMD,KAAKE,SAAWL,EAAaE,UACzB,IAGtC,OAAO3B,EAQoB+B,CADH,IAAI/B,IAEtBO,EAASiB,GAET,MAAMQ,EAAgBjB,EAAYS,GAC9BQ,EACDlB,EAAUkB,GAEVpB,EAAQ,MAEX,MAEN,CAACD,EAAMX,EAAOa,IAGdpB,IAAAC,cAAAD,IAAAwC,SAAA,KACGxC,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAACK,EAAQ,CAACC,MAAOA,EAAOF,MA1D9B,SAAmBoC,GAChB,GAAIrB,GAAiC,KAAvBb,EAAMkC,IAAgC,MAATvB,EAAc,OAEzD,MAAMwB,EAAY,IAAInC,GACtBmC,EAAUD,GAAevB,EACzBJ,EAAS4B,GAET,MAAMH,EAAgBjB,EAAYoB,GAC9BH,EACDlB,EAAUkB,GAGVpB,EAAQ,QA+CPC,EACEpB,IAAAC,cAAA,SACGD,IAAAC,cAAA,cAAoB,QAAXmB,EAAmB,cAAmBA,EAAH,WAG/CpB,IAAAC,cAAA,SAAG,SACMD,IAAAC,cAAA,UAAQC,UAAWgB,GAAOA,IAGtClB,IAAAC,cAAA,SACGD,IAAAC,cAAA,UAAQG,QArDjB,WACGU,EAAS,IAAIE,MAAM,GAAGC,KAAK,KAC3BE,EAAQ,KACRE,EAAU,QAkDsB,eC5FvBsB,MAJf,WACE,OAAO3C,IAAAC,cAACY,EAAI,O,MCCD+B,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhD,IAAAC,cAACD,IAAMiD,WAAU,KACfjD,IAAAC,cAAC0C,EAAG,S","file":"static/js/main.d6775831.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Square(props) {\n  return (\n    <button className={props.player} onClick={props.click}>\n      {props.player}\n    </button>\n  );\n}\n\nexport default Square;\n// gsdhjj","import React from \"react\";\nimport Square from \"./Square.js\";\n\nfunction GameGrid(props) {\n  const moves = props.moves;\n\n  return (\n    <div id=\"game-grid\">\n      {moves.map((move, index) => (\n        <Square key={index} player={move} click={() => props.click(index)} />\n      ))}\n    </div>\n  );\n}\n\nexport default GameGrid;\n","import React, { useState, useEffect } from \"react\";\nimport GameGrid from \"./GameGrid.js\";\n\nfunction Game() {\n   const [moves, setMoves] = useState(new Array(9).fill(\"\"));\n   const [turn, setTurn] = useState(\"X\");\n   const [winner, setWinner] = useState(null); // Track the winner or tie state\n\n   function checkWinner(moves) {\n      const winPatterns = [\n         [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n         [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n         [0, 4, 8], [2, 4, 6]             // Diagonals\n      ];\n\n      for (let pattern of winPatterns) {\n         const [a, b, c] = pattern;\n         if (moves[a] && moves[a] === moves[b] && moves[a] === moves[c]) {\n            return moves[a]; // Return \"X\" or \"O\" as the winner\n         }\n      }\n\n      // Check for a tie\n      if (moves.every(move => move !== \"\")) {\n         return \"Tie\";\n      }\n\n      return null; // No winner or tie yet\n   }\n\n   function gridClick(whichSquare) {\n      if (winner || moves[whichSquare] !== \"\" || turn === \"O\") return; // Ignore clicks if game is over, square is taken, or it's not the player's turn\n\n      const movesCopy = [...moves];\n      movesCopy[whichSquare] = turn;\n      setMoves(movesCopy);\n\n      const currentWinner = checkWinner(movesCopy);\n      if (currentWinner) {\n         setWinner(currentWinner); // Set the winner if found\n      } else {\n         // Alternate turns\n         setTurn(\"O\");\n      }\n   }\n\n   function newGame() {\n      setMoves(new Array(9).fill(\"\"));\n      setTurn(\"X\");\n      setWinner(null);\n   }\n\n   // Computer makes a random \"O\" move\n   function computerMove(moves) {\n      const emptySquares = moves\n         .map((move, index) => (move === \"\" ? index : null))\n         .filter(index => index !== null);\n\n      // Simple AI to pick a random available square\n      if (emptySquares.length > 0) {\n         const randomIndex = Math.floor(Math.random() * emptySquares.length);\n         moves[emptySquares[randomIndex]] = \"O\";\n      }\n\n      return moves;\n   }\n\n   // Handle computer's turn\n   useEffect(() => {\n      if (turn === \"O\" && !winner) {\n         setTimeout(() => {\n            const movesCopy = [...moves];\n            const updatedMoves = computerMove(movesCopy);\n            setMoves(updatedMoves);\n\n            const currentWinner = checkWinner(updatedMoves);\n            if (currentWinner) {\n               setWinner(currentWinner); // Set the winner if computer wins\n            } else {\n               setTurn(\"X\"); // Pass turn back to player\n            }\n         }, 500); // Add a slight delay for better UX\n      }\n   }, [turn, moves, winner]);\n\n   return (\n      <>\n         <h1>Tic-Tac-Toe</h1>\n         <GameGrid moves={moves} click={gridClick} />\n         {winner ? (\n            <p>\n               <strong>{winner === \"Tie\" ? \"It's a Tie!\" : `${winner} Wins!`}</strong>\n            </p>\n         ) : (\n            <p>\n               Turn: <strong className={turn}>{turn}</strong>\n            </p>\n         )}\n         <p>\n            <button onClick={newGame}>New Game</button>\n         </p>\n      </>\n   );\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./Game.js\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./styles.css\"; // Import CSS\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}